import React from 'react'
import { render, waitFor } from '@testing-library/react'
import { MemoryRouter, Route } from 'react-router-dom'
import { initializeTestEnvironment, clearFirestoreData } from '@firebase/testing'
import { db } from '../../firebase.config'
import Category from '../Category'

// Initialize Firebase emulator
const firebaseApp = initializeTestEnvironment({ projectId: 'your-project-id' })

beforeEach(async () => {
  // Clear Firestore data before each test
  await clearFirestoreData({ projectId: 'your-project-id' })
})

afterAll(async () => {
  // Delete the Firebase app and stop the emulator after all tests
  await firebaseApp.delete()
})

test('renders category page with listings', async () => {
  // Mock the category name parameter
  const categoryName = 'rent'

  // Create a sample listing
  const sampleListing = {
    id: 'listing1',
    data: {
      title: 'Sample Listing',
      description: 'This is a sample listing',
    },
  }

  // Add the sample listing to Firestore
  const listingsRef = db.collection('listing')
  await listingsRef.doc(sampleListing.id).set(sampleListing.data)

  // Render the Category component with the mocked category name
  const { getByText } = render(
    <MemoryRouter initialEntries={[`/category/${categoryName}`]}>
      <Route path="/category/:categoryName">
        <Category />
      </Route>
    </MemoryRouter>
  )

  // Wait for the listings to be fetched and rendered
  await waitFor(() => {
    expect(getByText(sampleListing.data.title)).toBeInTheDocument()
    expect(getByText(sampleListing.data.description)).toBeInTheDocument()
  })
})

// Add more test cases to cover different scenarios and functionality
